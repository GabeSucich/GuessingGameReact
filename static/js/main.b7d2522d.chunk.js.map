{"version":3,"sources":["components/Card/index.js","components/Navbar/index.js","components/Game/index.js","App.js","index.js"],"names":["Card","props","className","id","onClick","src","alt","Navbar","currentScore","highScore","Game","state","images","this","resetScore","resetImages","shuffleCards","shuffledArr","imgArr","length","randomIndex","Math","floor","random","push","splice","setState","allImages","guessed","image","resetGame","handleCorrectGuess","map","item","processGuess","key","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"ssCAeeA,MAZf,SAAcC,GACV,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,0BAA0BC,GAAIF,EAAME,IAC/C,yBAAKD,UAAU,cACX,yBAAKE,QAASH,EAAMG,QAASC,IAAKJ,EAAMI,IAAKC,IAAKL,EAAMK,U,MCQ7DC,MAbf,SAAgBN,GACZ,OACA,6BACI,yBAAKC,UAAU,gCACX,wBAAIA,UAAU,cAAd,eACA,wBAAIA,UAAU,eACV,8CAAqBD,EAAMO,aAA3B,kBAAwDP,EAAMQ,e,OCuF/DC,G,kNAxFXC,MAAQ,CACJC,OAAQA,EACRJ,aAAc,EACdC,UAAW,G,0DAIXI,KAAKC,aACLD,KAAKE,cACLF,KAAKG,iB,qCAML,IAFA,IAAIC,EAAc,GACdC,EAASL,KAAKF,MAAMC,OACjBM,EAAOC,OAAS,GAAG,CACtB,IAAIC,EAAcC,KAAKC,MAAMJ,EAAOC,OAASE,KAAKE,UAClDN,EAAYO,KAAKN,EAAOE,IACxBF,EAAOO,OAAOL,EAAa,GAG/BP,KAAKa,SAAS,CAAEd,OAAQK,M,mCAIxBJ,KAAKa,SAAS,CAAElB,aAAc,M,oCAK9B,IAFU,EAEJmB,EAAYd,KAAKF,MAAMC,OAFnB,cAIUe,GAJV,IAIV,2BAA+B,SACrBC,SAAU,GALV,8BAQVf,KAAKa,SAAS,CAAEd,OAAQe,M,2CAIxB,IAAInB,EAAeK,KAAKF,MAAMH,aAC1BC,EAAYI,KAAKF,MAAMF,WAC3BD,GAAgB,GACGC,IACfA,GAAa,GAEI,KAAjBD,GACAK,KAAKE,cAETF,KAAKa,SAAS,CAAClB,aAAcA,EAAcC,UAAWA,IACtDI,KAAKG,iB,mCAGIb,GAAK,IAAD,gBACOU,KAAKF,MAAMC,QADlB,IACb,2BAAuC,CAAC,IAA7BiB,EAA4B,QAC/BA,EAAM1B,KAAOA,IACT0B,EAAMD,QACNf,KAAKiB,aAGLD,EAAMD,SAAU,EAChBf,KAAKa,SAAS,CAACd,OAAQC,KAAKF,MAAMC,SAClCC,KAAKkB,wBATJ,iC,0CAgBblB,KAAKG,iB,+BAGC,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,CAAQR,aAAcK,KAAKF,MAAMH,aAAcC,UAAWI,KAAKF,MAAMF,YACrE,yBAAKP,UAAU,qBACX,yBAAKA,UAAU,OACVW,KAAKF,MAAMC,OAAOoB,KAAI,SAAAC,GAAI,OACvB,kBAAC,EAAD,CAAM7B,QAAS,kBAAM,EAAK8B,aAAaD,EAAK9B,KAAKE,IAAK4B,EAAK5B,IAAKC,IAAK2B,EAAK3B,IAAK6B,IAAKF,EAAK9B,e,GAjFlGiC,IAAMC,YCGVC,MANf,WACE,OACE,kBAAC,EAAD,OCDJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b7d2522d.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./style.css\"\n\nfunction Card(props) {\n    return (\n        <div className=\"col s6 m4 l3\">\n            <div className=\"card blue-grey darken-1\" id={props.id}>\n                <div className=\"card-image\">\n                    <img onClick={props.onClick} src={props.src} alt={props.alt}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react'\nimport \"./style.css\"\n\nfunction Navbar(props) {\n    return (\n    <nav>\n        <div className=\"nav-wrapper purple lighten-3\">\n            <ul className=\"left title\">Clicky Game</ul>\n            <ul className=\"right score\">\n                <li >Current Score: {props.currentScore} / High Score: {props.highScore}</li>\n            </ul>\n        </div>\n    </nav>\n    )\n}\n\nexport default Navbar","import React from 'react'\nimport Card from \"../Card\"\nimport Navbar from \"../Navbar\"\nimport images from \"../../images.json\"\nimport \"./style.css\"\n\nclass Game extends React.Component {\n\n    state = {\n        images: images,\n        currentScore: 0,\n        highScore: 0\n    }\n\n    resetGame() {\n        this.resetScore()\n        this.resetImages()\n        this.shuffleCards()\n    }\n\n    shuffleCards() {\n        var shuffledArr = []\n        var imgArr = this.state.images\n        while (imgArr.length > 0) {\n            var randomIndex = Math.floor(imgArr.length * Math.random())\n            shuffledArr.push(imgArr[randomIndex])\n            imgArr.splice(randomIndex, 1)\n            \n        }\n        this.setState({ images: shuffledArr })\n    }\n\n    resetScore() {\n        this.setState({ currentScore: 0 })\n    }\n\n    resetImages() {\n\n        const allImages = this.state.images\n\n        for (const image of allImages) {\n            image.guessed = false\n        }\n\n        this.setState({ images: allImages })\n    }\n\n    handleCorrectGuess() {\n        var currentScore = this.state.currentScore\n        var highScore = this.state.highScore\n        currentScore += 1\n        if (currentScore > highScore) {\n            highScore += 1\n        }\n        if (currentScore === 12) {\n            this.resetImages()\n        }\n        this.setState({currentScore: currentScore, highScore: highScore})\n        this.shuffleCards()\n    }\n\n    processGuess(id) {\n        for (const image of this.state.images) {\n            if (image.id === id) {\n                if (image.guessed) {\n                    this.resetGame()\n                }\n                else {\n                    image.guessed = true\n                    this.setState({images: this.state.images})\n                    this.handleCorrectGuess()\n                }\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.shuffleCards()\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar currentScore={this.state.currentScore} highScore={this.state.highScore} />\n                <div className=\"container pic-div\">\n                    <div className=\"row\">\n                        {this.state.images.map(item =>\n                            <Card onClick={() => this.processGuess(item.id)} src={item.src} alt={item.alt} key={item.id} />\n                        )}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Game","import React from 'react';\nimport Game from \"./components/Game\"\n\nfunction App() {\n  return (\n    <Game />\n  )\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}